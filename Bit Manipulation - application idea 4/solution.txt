X1 - If ith bit is set in X1 then ith bit will be set in Ai XOR X1 if ith bit is not set in Ai and ith bit will not be set in Ai XOR X1 if ith bit is set in Ai. So if the ith bit is set in less than (R-L+1)/2 numbers then ith bit should be set in X1 otherwise not. So try to think when ith bit will be set in the X1.

If ith bit is set in 'cntSet' numbers and not set in 'cntNotSet' numbers in the range [L,R], then -

1. ith bit is set in X1 then contribution of ith bit = cntNotSet*(1LL<<i).

2. ith bit is not set in X1 then contribution of ith bit = cntSet*(1LL<<i).

So according to the value of cntSet and cntNotSet, ith bit is decided. If cntSet = cntNotSet, then ith bit should not be set as the minimum value of X1 is required.

Value of cntSet and cntNotSet can be found for every query in O(1) using prefix sum.

 X2 - If the ith bit is set in all the numbers in the range [L, R], then it must not be set in the X2. Otherwise, it must be set.

X3 - If the ith bit is not set in all the numbers in the range[L, R], then it must not be set in the X3. Otherwise, it must be set.


#include <bits/stdc++.h>
using namespace std;
int prefSum[1000001][31];
int main()
{
   ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
   int testcases;
   cin>>testcases;
   while(testcases--)
   {
       int n,q;
       int i;
       cin>>n;
       for(i=0;i<=n;i++)
         for(int j = 0;j<31;j++)
           prefSum[i][j]=0;
       for(i=1;i<=n;i++)
       {
         int a;
         cin>>a;
         int cnt = 0;
         while(a>0)
         {
           prefSum[i][cnt]=a%2;
           a/=2;
           cnt++;
         }
       }
       for(i=1;i<=n;i++)
       {
         for(int j=0;j<31;j++)
           prefSum[i][j]+=prefSum[i-1][j];
       }
       cin>>q;
       while(q--)
       {
         int l,r;
         cin>>l>>r;
         double total=(r-l+1.0)/(2);
         long long x1 = 0,x2 = 0,x3 = 0;
         for(i=0;i<31;i++)
         {
           int p = prefSum[r][i]-prefSum[l-1][i];
           if(p<total)
             x1+=(1LL<<i);
           if(p!=(r-l+1))
             x2+=(1LL<<i);
           if(p)
             x3+=(1LL<<i);
         }
         long long ans = x1+x2+x3;
         cout<<ans<<"\n";
       }
   }
}
